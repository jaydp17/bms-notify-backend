service: bms-notify

provider:
  name: aws
  runtime: nodejs8.10
  region: ap-south-1
  deploymentBucket: bms-notify-backend-sls-deploy
  logRetentionInDays: 30
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::Join:
          - ':'
          - - 'arn:aws:dynamodb'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'table/bms-notify-${self:custom.stage}.*'

functions:
  regions:
    handler: src/resolvers/regions/index.handler
  cinemas:
    handler: src/resolvers/cinemas/index.handler
  movies:
    handler: src/resolvers/movies/index.handler
  subscribeMovieAtCinema:
    handler: src/resolvers/subscribe-movie-at-cinema/index.handler
  # crons
  update-regions:
    handler: src/crons/update-regions/index.handler
    description: A cron that fetches regions from BMS and puts it in dynamodb
    events:
      - schedule:
          name: bms-notify-update-regions-cron-${self:custom.stage}
          description: A cron that fetches regions from BMS and puts it in dynamodb
          rate: rate(7 days)
  endgame-checker:
    handler: src/crons/endgame-checker/index.handler
    description: A cron that checks if Avengers Endgame is available in my favorite cinemas
    memorySize: 256
    events:
      - schedule:
          enabled: true
          name: bms-notify-endgame-checker-cron-${self:custom.stage}
          description: A cron that checks if Avengers Endgame is available in my favorite cinemas
          rate: rate(15 minutes)

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-appsync-plugin
  - serverless-pseudo-parameters
  - serverless-appsync-offline
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  webpack:
    packager: 'yarn' # Defaults to npm
  appsync-emulator:
    buildPrefix: .webpack/service
  appsync-offline:
    port: 62222
    dynamodb:
      client:
        # if endpoint is provided, no local database server is started and and appsync connects to the endpoint - e.g. serverless-dynamodb-local
        endpoint: 'http://localhost:8000'
  serverless-offline:
    port: 3452 # this port is useless, thus it's given a random number
  appSync:
    name: bms-notify.${self:custom.stage}
    authenticationType: API_KEY
    mappingTemplates:
      - dataSource: regionsDataSource
        type: Query
        field: regions
        request: hello-request-mapping-template.txt
        response: hello-response-mapping-template.txt
      - dataSource: cinemasDataSource
        type: Query
        field: cinemas
        request: hello-request-mapping-template.txt
        response: hello-response-mapping-template.txt
      - dataSource: moviesDataSource
        type: Query
        field: movies
        request: hello-request-mapping-template.txt
        response: hello-response-mapping-template.txt
      - dataSource: subscribeFunction
        type: Mutation
        field: subscribeMovieAtCinema
        request: hello-request-mapping-template.txt
        response: hello-response-mapping-template.txt
    schema: # defaults schema.graphql
    serviceRole: AppSyncServiceRole-${self:custom.stage}
    dataSources:
      - type: AWS_LAMBDA
        name: regionsDataSource
        description: 'Lambda DataSource'
        config:
          functionName: regions # The function name in your serverless.yml. Ignored if lambdaFunctionArn is provided.
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] } # Where AppSyncLambdaServiceRole is an IAM role defined in Resources
      - type: AWS_LAMBDA
        name: cinemasDataSource
        description: 'Lambda DataSource'
        config:
          functionName: cinemas
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: moviesDataSource
        description: 'Lambda DataSource'
        config:
          functionName: movies
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: subscribeFunction
        description: 'Lambda function to subscribe'
        config:
          functionName: subscribeMovieAtCinema
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }

resources:
  Resources:
    # AppSync lambda role
    AppSyncLambdaServiceRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: 'Lambda-${self:custom.appSync.serviceRole}'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'appsync.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: 'Lambda-${self:custom.appSync.serviceRole}-Policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'lambda:invokeFunction'
                  Resource:
                    - 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-*'
