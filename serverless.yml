service: bms-notify

provider:
  name: aws
  runtime: nodejs8.10
  region: ap-south-1
  deploymentBucket: bms-notify-backend-sls-deploy
  logRetentionInDays: 30
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:BatchWriteItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        Fn::Join:
          - ':'
          - - 'arn:aws:dynamodb'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'table/bms-notify-${self:custom.stage}.*'

functions:
  all_regions:
    handler: src/resolvers/region/all-regions.handler
  region_from_code:
    handler: src/resolvers/region/from-region-code.handler
  all_cinemas:
    handler: src/resolvers/cinema/all-cinemas.handler
  cinema_from_code:
    handler: src/resolvers/cinema/from-cinema-code.handler
  all_movies:
    handler: src/resolvers/movie/all-movies.handler
  movie_from_code:
    handler: src/resolvers/movie/from-movie-code.handler
  subscribeMovieAtCinema:
    handler: src/resolvers/subscribe-movie-at-cinema/index.handler
  mySubscriptions:
    handler: src/resolvers/my-movie-subscriptions/index.handler
  # crons
  update-regions:
    handler: src/crons/update-regions/index.handler
    description: A cron that fetches regions from BMS and puts it in dynamodb
    events:
      - schedule:
          name: bms-notify-update-regions-cron-${self:custom.stage}
          description: A cron that fetches regions from BMS and puts it in dynamodb
          rate: rate(7 days)

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-appsync-plugin
  - serverless-pseudo-parameters
  - serverless-appsync-offline
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  webpack:
    packager: 'yarn' # Defaults to npm
  appsync-emulator:
    buildPrefix: .webpack/service
  appsync-offline:
    port: 62222
    dynamodb:
      client:
        # if endpoint is provided, no local database server is started and and appsync connects to the endpoint - e.g. serverless-dynamodb-local
        endpoint: 'http://localhost:8000'
  serverless-offline:
    port: 3452 # this port is useless, thus it's given a random number
  appSync:
    name: bms-notify.${self:custom.stage}
    authenticationType: API_KEY
    dataSources: ${file(./appsync.datasources.yml)}
    mappingTemplates: ${file(./appsync.mappings.yml)}
    schema: # defaults schema.graphql
    serviceRole: AppSyncServiceRole-${self:custom.stage}

resources:
  Resources:
    # AppSync lambda role
    AppSyncLambdaServiceRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: 'Lambda-${self:custom.appSync.serviceRole}'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'appsync.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: 'Lambda-${self:custom.appSync.serviceRole}-Policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'lambda:invokeFunction'
                  Resource:
                    - 'arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-*'
